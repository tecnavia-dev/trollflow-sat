config:
  product_list: &product_list
    ../config_files/met11/flow_processor_satpy_products-met11.yaml
  log_config:
    ../config_files/met11/flow_processor_log_config-met11.ini

  # It is possible to lock each worker to reduce simultaneous CPU load and
  # memory usage.  Each step that has *use_lock* set as true will wait until
  # the next worker has completed thtopicse previous task.  This is a global value
  # that is used below.  The individual values can be set as seen fit for
  # the planned use. NOTE: dameon workers do not have locks, but will release
  # locking for the previous Workflow worker.
  use_locks: &use_locks
    false

  # By default a Pass object is created for coverage calculations, but
  # that causes problems with geostationary satellites. It is
  # possible to disable that feature by uncommenting the option below
  # coverage_check: false

work:
    - type: daemon
      name: listener
      components:
        - class: !!python/object:posttroll.listener.ListenerContainer
            topics:
              - /HRIT/topic/aliasflow
            addresses:
              - tcp://127.0.0.1:16545
            nameserver:
              localhost

    - type: workflow
      name: satpy_compositor
      Workflow:
        - trollflow_sat.satpy_compositor.SceneLoader:
            product_list: *product_list
            instruments:
              - seviri
            # Topic for optional monitoring messages
            # monitor_topic: /monitor
            # Name of the running service, used in monitoring messages
            # service: hrpt
            # Optional list of nameservers and nameserver port
            # nameservers:
            #   - localhost
            # port: 0
            use_lock: *use_locks
            # ignore_* keywords can be used to remove some troublesome items
            #    from the message the compositor receives. In this case, we
            #    remove the `collection_area_id` item from the message data.
            # ignore_collection_area_id: true
    - type: workflow
      name: satpy_resampler
      Workflow:
        - trollflow_sat.satpy_resampler.Resampler:
            # Use "null" instead of "None"
            #radius: null
            # Save resampling LUTs?
            precompute: True
            # Save directory for resampling LUTs.  Has effect only if
            # precompute is True.  Defaults to /var/tmp/
            # cache_dir: /meteoswiss/PyTroll/tmp/
            cache_dir: /tecimport/data/tmp-lut/
            # Use data mask when calculating resampling (True, default), or use
            # un-masked coordinates (False).  The latter saves computation
            # time, but may leave holes in the data that might be filled
            # otherwise.
            mask_area: False
            #nprocs: 1
            proj_method: nearest
            product_list: *product_list
            use_lock: *use_locks
    - type: daemon
      name: satpy_writer
      components:
        - class: !!python/object:trollflow_sat.satpy_writer.DataWriterContainer
            nameservers: []
            port: 0
            topic: /another/image/yay
            save_settings:
              # Use "null" instead of "None"
              tags: sat_id=1234
              # Use "null" instead of "None"
              fformat: null
              # Use "null" instead of "None"
              gdal_options: null
              # Use "null" instead of "None"
              fformat: null
              blocksize: 0
            # By default writer doesn't lock the compositor, but that
            # can be done by setting use_lock to true
            # use_lock: true
            #
            # Writer publishes only a fixed set of variables
            # in its posttroll message. If you want to forward
            # attributes that were received from a previous
            # processing stage, you can define a map called
            # publish_vars. The keys denote variable names in
            # the message to be published. The value defines
            # the variable name in the received message.
            # publish_vars:
            #  sat_id: '6200014'
            #  chan_id: '100015'
            #  data_cat: 'GORN'
            #  data_source: 'EUMETSAT'
            #  physic_unit: 'K'
            #  nbits: 8
            # publish everything with
            # publish_vars: "*"
